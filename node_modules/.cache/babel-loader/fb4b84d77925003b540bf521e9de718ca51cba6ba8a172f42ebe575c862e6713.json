{"ast":null,"code":"var _jsxFileName = \"/Users/victor/Desktop/Crypto APP/crypto-app/src/components/GlobalChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Tooltip, Treemap } from \"recharts\";\nimport colors from \"../styles/_settings.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalChart = ({\n  coinsData\n}) => {\n  _s();\n  const [dataArray, setDataArray] = useState([]);\n  const colorPicker = number => {\n    if (number >= 20) {\n      return colors.color1;\n    } else if (number >= 5) {\n      return colors.green2;\n    } else if (number >= 0) {\n      return colors.green1;\n    } else if (number >= -5) {\n      return colors.red1;\n    } else if (number >= -20) {\n      return colors.red2;\n    } else {\n      return colors.black2;\n    }\n  };\n  useEffect(() => {\n    let chartData = [];\n    if (coinsData.length > 0) {\n      for (let i = 0; i < 45; i++) {\n        chartData.push({\n          name: coinsData[i].symbol.toUpperCase() + \" \" + coinsData[i].price_change_percentage_24h.toFixed(1) + \"%\",\n          size: coinsData[i].market_cap,\n          fill: colorPicker(coinsData[i].price_change_percentage_24h)\n        });\n      }\n    }\n    setDataArray(chartData);\n  }, [coinsData]);\n  const CustomTooltip = ({\n    active,\n    payload\n  }) => {\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: payload[0].payload.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-chart\",\n    children: [/*#__PURE__*/_jsxDEV(Treemap, {\n      width: 730,\n      height: 181,\n      data: dataArray,\n      dataKey: \"size\",\n      stroke: \"rgb(51,51,51)\",\n      fill: \"black\",\n      aspectRatio: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Treemap, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(GlobalChart, \"qXJfxCrIqd9KMzDGDz7oIam+9Ac=\");\n_c = GlobalChart;\nexport default GlobalChart;\nvar _c;\n$RefreshReg$(_c, \"GlobalChart\");","map":{"version":3,"names":["React","useEffect","useState","Tooltip","Treemap","colors","jsxDEV","_jsxDEV","GlobalChart","coinsData","_s","dataArray","setDataArray","colorPicker","number","color1","green2","green1","red1","red2","black2","chartData","length","i","push","name","symbol","toUpperCase","price_change_percentage_24h","toFixed","size","market_cap","fill","CustomTooltip","active","payload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","data","dataKey","stroke","aspectRatio","content","_c","$RefreshReg$"],"sources":["/Users/victor/Desktop/Crypto APP/crypto-app/src/components/GlobalChart.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Tooltip, Treemap } from \"recharts\";\nimport colors from \"../styles/_settings.scss\";\n\nconst GlobalChart = ({ coinsData }) => {\n  const [dataArray, setDataArray] = useState([]);\n\n  const colorPicker = (number) => {\n    if (number >= 20) {\n      return colors.color1;\n    } else if (number >= 5) {\n      return colors.green2;\n    } else if (number >= 0) {\n      return colors.green1;\n    } else if (number >= -5) {\n      return colors.red1;\n    } else if (number >= -20) {\n      return colors.red2;\n    } else {\n      return colors.black2;\n    }\n  };\n\n  useEffect(() => {\n    let chartData = [];\n    if (coinsData.length > 0) {\n      for (let i = 0; i < 45; i++) {\n        chartData.push({\n          name:\n            coinsData[i].symbol.toUpperCase() +\n            \" \" +\n            coinsData[i].price_change_percentage_24h.toFixed(1) +\n            \"%\",\n          size: coinsData[i].market_cap,\n          fill: colorPicker(coinsData[i].price_change_percentage_24h),\n        });\n      }\n    }\n    setDataArray(chartData);\n  }, [coinsData]);\n\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\">\n          <p className=\"label\">{payload[0].payload.name}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"global-chart\">\n      <Treemap\n        width={730}\n        height={181}\n        data={dataArray}\n        dataKey=\"size\"\n        stroke=\"rgb(51,51,51)\"\n        fill=\"black\"\n        aspectRatio=\"1\"\n      />\n      <Tooltip content={<CustomTooltip />} />\n      <Treemap />\n    </div>\n  );\n};\n\nexport default GlobalChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}